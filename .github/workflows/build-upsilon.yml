name: Build Upsilon with ActuarialAI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-web-simulator:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout current repository
      uses: actions/checkout@v4
    
    - name: Checkout Upsilon with submodules
      uses: actions/checkout@v4
      with:
        repository: UpsilonNumworks/Upsilon
        path: Upsilon
        submodules: recursive
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install system dependencies including freetype2
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3 python3-pip git
        sudo apt-get install -y libfreetype6-dev pkg-config
        sudo apt-get install -y libpng-dev libjpeg-dev
        
        # Verify freetype2 is available
        pkg-config --exists freetype2 && echo "✅ freetype2 found" || echo "❌ freetype2 not found"
        pkg-config --modversion freetype2 || echo "freetype2 version not available"
    
    - name: Setup Emscripten (without cache to avoid 503 errors)
      uses: mymindstorm/setup-emsdk@v14
      with:
        version: '3.1.50'
    
    - name: Verify Emscripten
      run: |
        emcc --version
        which emcc
    
    - name: Verify ActuarialAI files
      run: |
        echo "=== ActuarialAI files in repository ==="
        ls -la actuarial_ai_upsilon/
        echo "=== Content of main ActuarialAI file ==="
        head -20 actuarial_ai_upsilon/actuarial_ai_complete.c || echo "File not found"
    
    - name: Initialize Upsilon submodules
      run: |
        cd Upsilon
        echo "=== Initializing git submodules ==="
        git submodule status
        git submodule init
        git submodule update --recursive
        echo "=== Submodules after update ==="
        git submodule status
        
        # Verify required apps are present
        echo "=== Checking required apps ==="
        ls -la apps/
        ls -la apps/rpn/ || echo "rpn app missing"
        ls -la apps/atomic/ || echo "atomic app missing"
    
    - name: Create proper Upsilon app structure
      run: |
        echo "=== Creating Upsilon app structure ==="
        mkdir -p Upsilon/apps/external/actuarial_ai/
        
        # Copy all ActuarialAI files
        cp -r actuarial_ai_upsilon/* Upsilon/apps/external/actuarial_ai/
        
        # Verify the copy worked
        echo "=== Files copied to Upsilon ==="
        ls -la Upsilon/apps/external/actuarial_ai/
        
        # Check if we have the main source file
        if [ ! -f "Upsilon/apps/external/actuarial_ai/actuarial_ai_complete.c" ]; then
          echo "ERROR: Main ActuarialAI source file not found!"
          exit 1
        fi
        
        # Verify Upsilon structure
        echo "=== Upsilon apps structure ==="
        ls -la Upsilon/apps/
        ls -la Upsilon/apps/external/ || echo "External apps directory not found"
    
    - name: Check Upsilon build system
      run: |
        cd Upsilon
        echo "=== Upsilon Makefile check ==="
        ls -la Makefile || echo "No Makefile found"
        echo "=== Available make targets ==="
        make help || echo "No help target available"
        echo "=== Upsilon build configuration ==="
        ls -la build/ || echo "No build directory"
        
        # Check apps Makefile
        echo "=== Apps Makefile check ==="
        ls -la apps/Makefile || echo "No apps Makefile found"
    
    - name: Clean and prepare build
      run: |
        cd Upsilon
        make clean || echo "Clean failed, continuing..."
        
    - name: Attempt Upsilon build with detailed logging
      run: |
        cd Upsilon
        echo "=== Starting Upsilon build ==="
        echo "Build command: make PLATFORM=simulator TARGET=web epsilon.zip -j2"
        
        # Set PKG_CONFIG_PATH to help find freetype2
        export PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH"
        
        # Try the build and capture exit status
        set +e  # Don't exit on error immediately
        make PLATFORM=simulator TARGET=web epsilon.zip -j2 2>&1 | tee build.log
        BUILD_EXIT_CODE=$?
        set -e  # Re-enable exit on error
        
        echo "=== Build completed with exit code: $BUILD_EXIT_CODE ==="
        
        if [ $BUILD_EXIT_CODE -ne 0 ]; then
          echo "=== BUILD FAILED - Showing last 50 lines of build log ==="
          tail -50 build.log
          echo "=== BUILD FAILED - Checking for common issues ==="
          echo "Checking if external apps are properly configured..."
          find . -name "*.mk" -o -name "*.mak" | head -10
          echo "=== Checking freetype2 availability ==="
          pkg-config --exists freetype2 && echo "freetype2 available" || echo "freetype2 not available"
          echo "=== Checking submodules ==="
          git submodule status
          exit 1
        else
          echo "=== BUILD SUCCEEDED ==="
          echo "Checking what files were generated:"
          find . -name "*epsilon*" -type f 2>/dev/null || echo "No epsilon files found"
          echo "=== Checking build directory ==="
          ls -la output/release/simulator/web/ 2>/dev/null || echo "No web simulator directory"
        fi
    
    - name: Verify build output
      run: |
        cd Upsilon
        echo "=== Build output verification ==="
        echo "Current working directory: $(pwd)"
        echo "=== Checking build directory structure ==="
        ls -la output/ || echo "No output directory"
        ls -la output/release/ || echo "No release directory"
        ls -la output/release/simulator/ || echo "No simulator directory"
        ls -la output/release/simulator/web/ || echo "No web simulator directory"
        echo "=== Searching for epsilon files in build directory ==="
        find output/ -name "*epsilon*" -type f 2>/dev/null || echo "No epsilon files found in output/"
        echo "=== Searching for all files in web simulator directory ==="
        find output/release/simulator/web/ -type f 2>/dev/null || echo "No files in web simulator directory"
        echo "=== Checking if build actually succeeded ==="
        echo "Build log tail (last 20 lines):"
        tail -20 build.log || echo "No build.log found"
    
    - name: Package simulator (if build succeeded)
      run: |
        cd Upsilon
        echo "=== Packaging web simulator ==="
        
        # Check if files are in the build output directory
        if [ -f "output/release/simulator/web/epsilon.zip" ]; then
          echo "Found epsilon.zip in build output directory"
          cd output/release/simulator/web/
          ls -la
          
          # Extract the zip file
          unzip epsilon.zip -d extracted/
          echo "=== Contents of extracted simulator ==="
          ls -la extracted/
          
        elif [ -f "output/release/simulator/web/epsilon.js" ]; then
          echo "Found epsilon.js in build output directory"
          cd output/release/simulator/web/
          ls -la
          
          # Create extracted directory and copy files
          mkdir -p extracted/
          cp epsilon.js extracted/
          cp *.html extracted/ 2>/dev/null || echo "No HTML files found"
          cp *.css extracted/ 2>/dev/null || echo "No CSS files found"
          echo "=== Contents of extracted simulator ==="
          ls -la extracted/
          
        else
          echo "No simulator files found in expected build output directory"
          echo "=== Checking all possible locations ==="
          find . -name "*epsilon*" -type f 2>/dev/null || echo "No epsilon files found anywhere"
          echo "=== Directory structure ==="
          find output/ -type f 2>/dev/null | head -20 || echo "No files in output directory"
          exit 1
        fi
    
    - name: Upload build log (always)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-log-web
        path: Upsilon/build.log
        retention-days: 7
    
    - name: Upload Web Simulator
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: upsilon-web-simulator-actuarial-ai
        path: Upsilon/output/release/simulator/web/
        retention-days: 30
    
    - name: Upload Extracted Simulator
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: upsilon-simulator-ready-to-use
        path: Upsilon/output/release/simulator/web/extracted/
        retention-days: 30

  create-simple-package:
    needs: [build-web-simulator]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Download Web Simulator
      uses: actions/download-artifact@v4
      with:
        name: upsilon-simulator-ready-to-use
        path: web-simulator/
    
    - name: Create Release Package
      run: |
        mkdir -p release-package
        
        # Web Simulator
        if [ -d "web-simulator" ]; then
          cp -r web-simulator release-package/web-simulator
          echo "✅ Web simulator included" >> release-package/README.txt
        fi
        
        # Create instructions
        cat > release-package/INSTRUCTIONS.md << 'EOF'
        # 🧮 ActuarialAI for Upsilon - Release Package
        
        ## 🌐 Web Simulator
        1. Open `web-simulator/epsilon.html` in your browser
        2. Navigate to: Menu → External → ActuarialAI
        3. Enjoy your actuarial calculations!
        
        ## 🔧 Features
        - 💰 Life Insurance Calculations
        - 📈 Annuity Valuations  
        - 📊 Mortality Tables
        - 🔢 Interest Calculations
        - 🤖 AI-Powered Actuarial Engine
        
        Developed by CABRERA
        EOF
        
        ls -la release-package/
    
    - name: Upload Release Package
      uses: actions/upload-artifact@v4
      with:
        name: ActuarialAI-Upsilon-Complete-Package
        path: release-package/
        retention-days: 90 